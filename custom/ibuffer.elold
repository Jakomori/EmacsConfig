
(require 'ibuf-ext)
(add-to-list 'ibuffer-never-show-predicates "^\\*")

(ibuffer)
(ibuffer-auto-mode)
(ibuffer)

(add-hook 'ibuffer-mode-hook (lambda () (ibuffer-auto-mode 1)))

;;Remove Title and Summary
(defadvice ibuffer-update-title-and-summary (after remove-column-titles)
  (save-excursion
    (set-buffer "*Ibuffer*")
    (toggle-read-only 0)
    (goto-char 1)
    (search-forward "-\n" nil t)
    (delete-region 1 (point))
    (let ((window-min-height 1)) 
      ;; save a little screen estate
      (shrink-window-if-larger-than-buffer))
    (toggle-read-only)))

; (ad-activate 'ibuffer-update-title-and-summary)

;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline t)
  (cond
   ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
   ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
   ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
   (t (format "%8d" (buffer-size)))))

;;Modify the default ibuffer-formats
(setq ibuffer-formats
      '((mark modified read-only " "
	      (name 18 18 :right :elide)
	      " "
	      (size-h 9 -1 :left)
	      " "
	      (mode 16 16 :right :elide)
	      " "
	      filename-and-process)))

;; (defun ajv/human-readable-file-sizes-to-bytes (string)
;;   "Convert a human-readable file size into bytes."
;;   (interactive)
;;   (cond
;;    ((string-suffix-p "G" string t)
;;     (* 1000000000 (string-to-number (substring string 0 (- (length string) 1)))))
;;    ((string-suffix-p "M" string t)
;;     (* 1000000 (string-to-number (substring string 0 (- (length string) 1)))))
;;    ((string-suffix-p "K" string t)
;;     (* 1000 (string-to-number (substring string 0 (- (length string) 1)))))
;;    (t
;;     (string-to-number (substring string 0 (- (length string) 1))))
;;    )
;;   )

;; (defun ajv/bytes-to-human-readable-file-sizes (bytes)
;;   "Convert number of bytes to human-readable file size."
;;   (interactive)
;;   (cond
;;    ((> bytes 1000000000) (format "%10.1fG" (/ bytes 1000000000.0)))
;;    ((> bytes 100000000) (format "%10.0fM" (/ bytes 1000000.0)))
;;    ((> bytes 1000000) (format "%10.1fM" (/ bytes 1000000.0)))
;;    ((> bytes 100000) (format "%10.0fk" (/ bytes 1000.0)))
;;    ((> bytes 1000) (format "%10.1fk" (/ bytes 1000.0)))
;;    (t (format "%10d" bytes)))
;;   )

;; ;; Use human readable Size column instead of original one
;; (define-ibuffer-column size-h
;;   (:name "Size"
;; 	 :inline t
;; 	 :summarizer
;; 	 (lambda (column-strings)
;; 	   (let ((total 0))
;; 	     (dolist (string column-strings)
;; 	       (setq total
;; 		     ;; like, ewww ...
;; 		     (+ (float (ajv/human-readable-file-sizes-to-bytes string))
;; 			total)))
;; 	     (ajv/bytes-to-human-readable-file-sizes total)))	 ;; :summarizer nil
;; 	 )
;;   (ajv/bytes-to-human-readable-file-sizes (buffer-size)))

; ;; Modify the default ibuffer-formats
; (setq ibuffer-formats
;       '((mark modified read-only locked " "
; 	      (name 20 20 :left :elide)
; 	      " "
; 	      (size-h 11 -1 :right)
; 	      " "
; 	      (mode 16 16 :left :elide)
; 	      " "
; 	      filename-and-process)
; 	(mark " "
; 	      (name 16 -1)
; 	      " " filename)))

;; (defun ibuffer-previous-line ()
;;   (interactive) (previous-line)
;;   (if (<= (line-number-at-pos) 2)
;;       (goto-line (- (count-lines (point-min) (point-max)) 2))))
;; (defun ibuffer-next-line ()
;;   (interactive) (next-line)
;;   (if (>= (line-number-at-pos) (- (count-lines (point-min) (point-max)) 1))
;;       (goto-line 3)))
;; (define-key ibuffer-mode-map (kbd "<up>") 'ibuffer-previous-line)
;; (define-key ibuffer-mode-map (kbd "<down>") 'ibuffer-next-line)

;;   (defun ibuffer-advance-motion (direction)
;;         (forward-line direction)
;;         (beginning-of-line)
;;         (if (not (get-text-property (point) 'ibuffer-filter-group-name))
;;             t
;;           (ibuffer-skip-properties '(ibuffer-filter-group-name)
;;                                    direction)
;;           nil))
;;   (defun ibuffer-previous-line (&optional arg)
;;     "Move backwards ARG lines, wrapping around the list if necessary."
;;     (interactive "P")
;;     (or arg (setq arg 1))
;;     (let (err1 err2)
;;       (while (> arg 0)
;;         (cl-decf arg)
;;         (setq err1 (ibuffer-advance-motion -1)
;;               err2 (if (not (get-text-property (point) 'ibuffer-title)) 
;;                        t
;;                      (goto-char (point-max))
;;                      (beginning-of-line)
;;                      (ibuffer-skip-properties '(ibuffer-summary 
;;                                                 ibuffer-filter-group-name) 
;;                                               -1)
;;                      nil)))
;;       (and err1 err2)))
;;   (defun ibuffer-next-line (&optional arg)
;;     "Move forward ARG lines, wrapping around the list if necessary."
;;     (interactive "P")
;;     (or arg (setq arg 1))
;;     (let (err1 err2)
;;       (while (> arg 0)
;;         (cl-decf arg)
;;         (setq err1 (ibuffer-advance-motion 1)
;;               err2 (if (not (get-text-property (point) 'ibuffer-summary)) 
;;                        t
;;                      (goto-char (point-min))
;;                      (beginning-of-line)
;;                      (ibuffer-skip-properties '(ibuffer-summary 
;;                                                 ibuffer-filter-group-name
;;                                                 ibuffer-title)
;;                                               1)
;;                      nil)))
;;       (and err1 err2)))
;;   (defun brust/ibuffer-next-header ()
;;     (interactive)
;;     (while (ibuffer-next-line)))
;;   (defun brust/ibuffer-previous-header ()
;;     (interactive)
;;     (while (ibuffer-previous-line)))
;;   (define-key ibuffer-mode-map (kbd "<up>") 'ibuffer-previous-line)
;;   (define-key ibuffer-mode-map (kbd "<down>") 'ibuffer-next-line)
;;   (define-key ibuffer-mode-map (kbd "<right>") 'ibuffer-previous-header)
;;   (define-key ibuffer-mode-map (kbd "<left>") 'ibuffer-next-header)

;; (setq ibuffer-formats 
;;       '((mark modified read-only " "
;;               (name 30 30 :left :elide) ; change: 30s were originally 18s
;;               " "
;;               (size 9 -1 :right)
;;               " "
;;               (mode 16 16 :left :elide)
;;               " " filename-and-process)
;;         (mark " "
;;               (name 16 -1)
;;               " " filename)))

 ;; (defadvice ibuffer-update-title-and-summary (after remove-column-titles)
 ;;   (save-excursion
 ;;      (set-buffer "*Ibuffer*")
 ;;      (toggle-read-only 0)
 ;;      (goto-char 1)
 ;;      (search-forward "-\n" nil t)
 ;;      (delete-region 1 (point))
 ;;      (let ((window-min-height 1)) 
 ;;        ;; save a little screen estate
 ;;        (shrink-window-if-larger-than-buffer))
 ;;      (toggle-read-only)))
  
 ;;  (ad-activate 'ibuffer-update-title-and-summary)


;; (setq ibuffer-format-save ibuffer-formats)
;;  (setq ibuffer-formats (append ibuffer-formats '((mark " " filename-and-process))))

(use-package all-the-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
